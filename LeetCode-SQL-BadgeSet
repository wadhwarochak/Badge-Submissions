==============================================================================
1757. Recyclable and Low Fat Products

SELECT product_id
FROM Products
WHERE low_fats = 'Y' AND recyclable = 'Y';
==============================================================================
1068. Product Sales Analysis I

SELECT product_name, year, price
FROM Product
LEFT JOIN Sales ON Product.product_id = Sales.product_id
WHERE year IS NOT NULL AND price IS NOT NULL;
==============================================================================
1683. Invalid Tweets

select tweet_id from Tweets where LENGTH(content)>15;
==============================================================================
1075. Project Employees I

SELECT p.project_id, ROUND(AVG(e.experience_years),2) AS average_years
from Project p
JOIN Employee e ON e.employee_id = p.employee_id
GROUP BY p.project_id;
==============================================================================
1378. Replace Employee ID With The Unique Identifier

SELECT EmployeeUNI.unique_id, Employees.name
from Employees
LEFT JOIN EmployeeUNI
ON EmployeeUNI.id = Employees.id;
==============================================================================
1327. List the Products Ordered in a Period

SELECT product_name, SUM(unit) AS unit
FROM
    Orders AS o
    JOIN Products AS p ON o.product_id = p.product_id
WHERE DATE_FORMAT(order_date, '%Y-%m') = '2020-02'
GROUP BY o.product_id
HAVING unit >= 100;
==============================================================================
1517. Find Users With Valid E-Mails

SELECT *
FROM Users
WHERE mail COLLATE utf8_bin REGEXP '^[A-Za-z]+[A-Za-z0-9\_\.\-]*@leetcode\\.com$';
==============================================================================
1581. Customer Who Visited but Did Not Make Any Transactions

SELECT
  Visits.customer_id,
  COUNT(Visits.visit_id) AS count_no_trans
FROM Visits
LEFT JOIN Transactions
  USING (visit_id)
WHERE Transactions.transaction_id IS NULL
GROUP BY 1;
==============================================================================
197. Rising Temperature

SELECT Today.id
FROM Weather AS Today
INNER JOIN Weather AS Yesterday
  ON (DATE_SUB(Today.recordDate, INTERVAL 1 DAY) = Yesterday.recordDate)
WHERE Today.temperature > Yesterday.temperature;
==============================================================================
1661. Average Time of Process per Machine

SELECT
  StartActivity.machine_id,
  ROUND(
    AVG(EndActivity.timestamp - StartActivity.timestamp),
    3
  ) AS processing_time
FROM Activity AS StartActivity
INNER JOIN Activity AS EndActivity
  USING (machine_id, process_id)
WHERE
  StartActivity.activity_type = 'start'
  AND EndActivity.activity_type = 'end'
GROUP BY 1;
==============================================================================
577. Employee Bonus

SELECT Employee.name, Bonus.bonus
FROM Employee
LEFT JOIN Bonus
  USING (empId)
WHERE IFNULL(Bonus.bonus, 0) < 1000;
==============================================================================
1280. Students and Examinations

SELECT student_id, student_name, subject_name, COUNT(e.student_id) AS attended_exams
FROM
    Students
    JOIN Subjects
    LEFT JOIN Examinations AS e USING (student_id, subject_name)
GROUP BY 1, 3
ORDER BY 1, 3;
==============================================================================
620. Not Boring Movies

SELECT *
FROM Cinema
WHERE
  MOD(id, 2) = 1
  AND description != 'boring'
ORDER BY rating DESC;
==============================================================================
1251. Average Selling Price

SELECT
    p.product_id,
    IFNULL(ROUND(SUM(price * units) / SUM(units), 2), 0) AS average_price
FROM
    Prices AS p
    LEFT JOIN UnitsSold AS u
        ON p.product_id = u.product_id AND purchase_date BETWEEN start_date AND end_date
GROUP BY 1;
==============================================================================
570. Managers with at Least 5 Direct Reports

SELECT Manager.name
FROM Employee
INNER JOIN Employee AS Manager
  ON (Employee.managerId = Manager.id)
GROUP BY Manager.id
HAVING COUNT(*) >= 5;
==============================================================================
1633. Percentage of Users Attended a Contest

SELECT
  contest_id,
  ROUND(
    COUNT(user_id) * 100 / (
      SELECT COUNT(*)
      FROM Users
    ),
    2
  ) AS percentage
FROM Register
GROUP BY 1
ORDER BY percentage DESC, contest_id;
==============================================================================
1211. Queries Quality and Percentage

SELECT
  query_name,
  ROUND(AVG(rating / position), 2) AS quality,
  ROUND(AVG(rating < 3) * 100, 2) AS poor_query_percentage
FROM Queries
GROUP BY 1;
==============================================================================
==============================================================================
==============================================================================
==============================================================================
==============================================================================
==============================================================================
==============================================================================

