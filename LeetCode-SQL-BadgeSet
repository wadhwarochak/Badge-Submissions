==============================================================================
1757. Recyclable and Low Fat Products

SELECT product_id
FROM Products
WHERE low_fats = 'Y' AND recyclable = 'Y';
==============================================================================
1068. Product Sales Analysis I

SELECT product_name, year, price
FROM Product
LEFT JOIN Sales ON Product.product_id = Sales.product_id
WHERE year IS NOT NULL AND price IS NOT NULL;
==============================================================================
1683. Invalid Tweets

select tweet_id from Tweets where LENGTH(content)>15;
==============================================================================
1075. Project Employees I

SELECT p.project_id, ROUND(AVG(e.experience_years),2) AS average_years
from Project p
JOIN Employee e ON e.employee_id = p.employee_id
GROUP BY p.project_id;
==============================================================================
1378. Replace Employee ID With The Unique Identifier

SELECT EmployeeUNI.unique_id, Employees.name
from Employees
LEFT JOIN EmployeeUNI
ON EmployeeUNI.id = Employees.id;
==============================================================================
1327. List the Products Ordered in a Period

SELECT product_name, SUM(unit) AS unit
FROM
    Orders AS o
    JOIN Products AS p ON o.product_id = p.product_id
WHERE DATE_FORMAT(order_date, '%Y-%m') = '2020-02'
GROUP BY o.product_id
HAVING unit >= 100;
==============================================================================
1517. Find Users With Valid E-Mails

SELECT *
FROM Users
WHERE mail COLLATE utf8_bin REGEXP '^[A-Za-z]+[A-Za-z0-9\_\.\-]*@leetcode\\.com$';
==============================================================================
1581. Customer Who Visited but Did Not Make Any Transactions

SELECT
  Visits.customer_id,
  COUNT(Visits.visit_id) AS count_no_trans
FROM Visits
LEFT JOIN Transactions
  USING (visit_id)
WHERE Transactions.transaction_id IS NULL
GROUP BY 1;
==============================================================================
197. Rising Temperature

SELECT Today.id
FROM Weather AS Today
INNER JOIN Weather AS Yesterday
  ON (DATE_SUB(Today.recordDate, INTERVAL 1 DAY) = Yesterday.recordDate)
WHERE Today.temperature > Yesterday.temperature;
==============================================================================
1661. Average Time of Process per Machine

SELECT
  StartActivity.machine_id,
  ROUND(
    AVG(EndActivity.timestamp - StartActivity.timestamp),
    3
  ) AS processing_time
FROM Activity AS StartActivity
INNER JOIN Activity AS EndActivity
  USING (machine_id, process_id)
WHERE
  StartActivity.activity_type = 'start'
  AND EndActivity.activity_type = 'end'
GROUP BY 1;
==============================================================================
